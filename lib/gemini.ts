// lib/gemini.ts
export interface GeneratedBlog {
  title: string;
  content: string;
}

export class GeminiAPI {
  private static API_KEY = 'AIzaSyAxd3bXoh0MnwufqV1B3vtEFSMWBPDTunE';
  private static BASE_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent';

  private static async makeRequest(systemPrompt: string): Promise<GeneratedBlog> {
    try {
      console.log('Making request to Gemini API...');
      
      const requestBody = {
        contents: [{
          parts: [{
            text: systemPrompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topP: 0.8,
          topK: 40,
          maxOutputTokens: 2048,
        }
      };
      
      const response = await fetch(this.BASE_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-goog-api-key': this.API_KEY,
        },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Gemini API Error:', response.status, errorText);
        
        // Parse error untuk memberikan pesan yang lebih jelas
        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;
        try {
          const errorData = JSON.parse(errorText);
          if (errorData.error && errorData.error.message) {
            errorMessage = errorData.error.message;
          }
        } catch (e) {
          // Jika tidak bisa parse JSON, gunakan raw text
          errorMessage = errorText || errorMessage;
        }
        
        throw new Error(errorMessage);
      }

      const data = await response.json();
      console.log('Gemini API Response received');
      
      // Check for API-level errors
      if (data.error) {
        throw new Error(`API Error: ${data.error.message || 'Unknown API error'}`);
      }
      
      if (!data.candidates || data.candidates.length === 0) {
        console.error('No candidates in response:', data);
        throw new Error('No content generated by AI. Coba dengan topik yang berbeda.');
      }
      
      const candidate = data.candidates[0];
      
      // Check if content was filtered
      if (candidate.finishReason === 'SAFETY') {
        throw new Error('Konten difilter karena alasan keamanan. Coba dengan topik yang berbeda.');
      }
      
      if (!candidate.content || !candidate.content.parts || candidate.content.parts.length === 0) {
        console.error('Invalid content structure:', candidate);
        throw new Error('Format response tidak valid dari Gemini API');
      }

      const generatedText = candidate.content.parts[0].text;
      console.log('Generated text length:', generatedText.length);
      
      if (!generatedText || generatedText.trim().length === 0) {
        throw new Error('AI tidak menghasilkan konten. Coba lagi dengan topik yang berbeda.');
      }
      
      // Extract JSON from the response with better error handling
      const jsonMatch = generatedText.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        console.error('No JSON found in response:', generatedText);
        // Coba ekstrak dengan cara lain
        const lines = generatedText.split('\n');
        const jsonLines = lines.filter((line: string) => line.includes('"title"') || line.includes('"content"'));
        if (jsonLines.length > 0) {
          throw new Error('AI menghasilkan format yang tidak sesuai. Response diterima tapi tidak dalam format JSON yang diharapkan.');
        }
        throw new Error('AI tidak menghasilkan format JSON yang valid. Coba lagi.');
      }

      let blogData;
      try {
        blogData = JSON.parse(jsonMatch[0]);
      } catch (parseError) {
        console.error('JSON parse error:', parseError);
        console.error('Raw JSON string:', jsonMatch[0]);
        throw new Error('Format JSON tidak valid dari AI. Coba generate ulang.');
      }
      
      if (!blogData.title || !blogData.content) {
        console.error('Invalid blog data structure:', blogData);
        throw new Error('AI tidak menghasilkan struktur data yang lengkap (title dan content diperlukan).');
      }
      
      // Validate content quality
      if (blogData.title.length < 10) {
        throw new Error('Judul yang dihasilkan terlalu pendek. Coba generate ulang.');
      }
      
      if (blogData.content.length < 100) {
        throw new Error('Konten yang dihasilkan terlalu pendek. Coba generate ulang.');
      }

      console.log('Blog generated successfully:', blogData.title);
      return blogData;
    } catch (error) {
      console.error('Error in makeRequest:', error);
      
      // Re-throw dengan pesan yang lebih user-friendly
      if (error instanceof Error) {
        throw error;
      } else {
        throw new Error('Terjadi kesalahan tidak dikenal saat memanggil Gemini API.');
      }
    }
  }

  static async generateBlog(prompt: string): Promise<GeneratedBlog> {
    const systemPrompt = `Kamu adalah seorang penulis blog yang ahli. Buatkan artikel blog dalam bahasa Indonesia yang berkualitas tinggi dengan format JSON berikut:
{
  "title": "judul yang menarik dan SEO friendly",
  "content": "konten artikel yang lengkap, informatif, dan engaging. Minimal 500 kata. Gunakan HTML tags untuk formatting seperti <h2>, <h3>, <p>, <ul>, <li>, <strong>, <em>, dll. Buat artikel yang terstruktur dengan baik dengan subjudul dan paragraf yang jelas."
}

Topik yang diminta: ${prompt}

Pastikan:
1. Judul menarik dan clickable
2. Konten informatif dan bermanfaat
3. Menggunakan HTML formatting yang baik
4. Artikel minimal 500 kata
5. Terstruktur dengan baik (intro, body, conclusion)
6. SEO friendly`;

    return this.makeRequest(systemPrompt);
  }

  static async regenerateBlog(originalTitle: string, originalContent: string): Promise<GeneratedBlog> {
    const systemPrompt = `Kamu adalah seorang penulis blog yang ahli. Regenerate dan perbaiki artikel blog ini dengan konten yang lebih baik, lebih informatif, dan engaging. Buatkan dalam format JSON berikut:
{
  "title": "judul yang diperbaiki (bisa sama atau lebih baik)",
  "content": "konten artikel yang diperbaiki dan diperluas. Minimal 800 kata. Gunakan HTML tags untuk formatting seperti <h2>, <h3>, <p>, <ul>, <li>, <strong>, <em>, dll. Buat artikel yang terstruktur dengan baik."
}

Artikel asli:
Judul: ${originalTitle}
Konten: ${originalContent}

Pastikan:
1. Judul tetap relevan atau lebih baik
2. Konten lebih informatif dan bermanfaat  
3. Menggunakan HTML formatting yang baik
4. Artikel minimal 800 kata
5. Terstruktur dengan baik (intro, body, conclusion)
6. SEO friendly`;

    return this.makeRequest(systemPrompt);
  }

  static generateSlug(title: string): string {
    return title
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .trim();
  }
}
