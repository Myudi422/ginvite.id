// lib/gemini.ts
export interface GeneratedBlog {
  title: string;
  content: string;
}

export class GeminiAPI {
  private static API_KEY = 'AIzaSyAxd3bXoh0MnwufqV1B3vtEFSMWBPDTunE';
  private static BASE_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent';

  private static cleanGeneratedText(text: string): string {
    // Remove common markdown formatting
    let cleaned = text.replace(/```json\s*/g, '').replace(/```\s*/g, '');
    
    // Remove any leading/trailing text that's not JSON
    const jsonStart = cleaned.indexOf('{');
    const jsonEnd = cleaned.lastIndexOf('}');
    
    if (jsonStart !== -1 && jsonEnd !== -1 && jsonEnd > jsonStart) {
      cleaned = cleaned.substring(jsonStart, jsonEnd + 1);
    }
    
    return cleaned.trim();
  }

  private static fixJsonQuotes(jsonString: string): string {
    // Fix common JSON issues with quotes in content
    // This is a simple fix, more complex content might need better handling
    try {
      // Try to parse first
      JSON.parse(jsonString);
      return jsonString;
    } catch (e) {
      // If it fails, try to fix quotes
      let fixed = jsonString;
      
      // Find content field and escape quotes within it
      const contentMatch = fixed.match(/"content"\s*:\s*"([^"]*(?:\\.[^"]*)*)"(?=\s*[,}])/);
      if (contentMatch) {
        const contentValue = contentMatch[1];
        const fixedContent = contentValue.replace(/"/g, '\\"');
        fixed = fixed.replace(contentMatch[0], `"content":"${fixedContent}"`);
      }
      
      return fixed;
    }
  }

  private static async makeRequest(systemPrompt: string): Promise<GeneratedBlog> {
    try {
      console.log('Making request to Gemini API...');
      
      const requestBody = {
        contents: [{
          parts: [{
            text: systemPrompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topP: 0.8,
          topK: 40,
          maxOutputTokens: 2048,
        }
      };
      
      const response = await fetch(this.BASE_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-goog-api-key': this.API_KEY,
        },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Gemini API Error:', response.status, errorText);
        
        // Parse error untuk memberikan pesan yang lebih jelas
        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;
        try {
          const errorData = JSON.parse(errorText);
          if (errorData.error && errorData.error.message) {
            errorMessage = errorData.error.message;
          }
        } catch (e) {
          // Jika tidak bisa parse JSON, gunakan raw text
          errorMessage = errorText || errorMessage;
        }
        
        throw new Error(errorMessage);
      }

      const data = await response.json();
      console.log('Gemini API Response received');
      
      // Check for API-level errors
      if (data.error) {
        throw new Error(`API Error: ${data.error.message || 'Unknown API error'}`);
      }
      
      if (!data.candidates || data.candidates.length === 0) {
        console.error('No candidates in response:', data);
        throw new Error('No content generated by AI. Coba dengan topik yang berbeda.');
      }
      
      const candidate = data.candidates[0];
      
      // Check if content was filtered
      if (candidate.finishReason === 'SAFETY') {
        throw new Error('Konten difilter karena alasan keamanan. Coba dengan topik yang berbeda.');
      }
      
      if (!candidate.content || !candidate.content.parts || candidate.content.parts.length === 0) {
        console.error('Invalid content structure:', candidate);
        throw new Error('Format response tidak valid dari Gemini API');
      }

      const generatedText = candidate.content.parts[0].text;
      console.log('Generated text length:', generatedText.length);
      
      if (!generatedText || generatedText.trim().length === 0) {
        throw new Error('AI tidak menghasilkan konten. Coba lagi dengan topik yang berbeda.');
      }
      
      // Clean the generated text
      const cleanedText = this.cleanGeneratedText(generatedText);
      console.log('Cleaned text:', cleanedText.substring(0, 200) + '...');
      
      if (!cleanedText || cleanedText.length < 10) {
        console.error('No valid JSON structure found:', generatedText);
        throw new Error('AI tidak menghasilkan format JSON yang valid. Coba lagi.');
      }

      let blogData;
      try {
        // Try to parse the cleaned JSON
        const fixedJson = this.fixJsonQuotes(cleanedText);
        blogData = JSON.parse(fixedJson);
      } catch (parseError) {
        console.error('JSON parse error:', parseError);
        console.error('Cleaned JSON string:', cleanedText);
        console.error('Original response:', generatedText);
        throw new Error('Format JSON tidak valid dari AI. Coba generate ulang.');
      }
      
      if (!blogData.title || !blogData.content) {
        console.error('Invalid blog data structure:', blogData);
        throw new Error('AI tidak menghasilkan struktur data yang lengkap (title dan content diperlukan).');
      }
      
      // Validate content quality
      if (blogData.title.length < 10) {
        throw new Error('Judul yang dihasilkan terlalu pendek. Coba generate ulang.');
      }
      
      if (blogData.content.length < 100) {
        throw new Error('Konten yang dihasilkan terlalu pendek. Coba generate ulang.');
      }

      console.log('Blog generated successfully:', blogData.title);
      return blogData;
    } catch (error) {
      console.error('Error in makeRequest:', error);
      
      // Re-throw dengan pesan yang lebih user-friendly
      if (error instanceof Error) {
        throw error;
      } else {
        throw new Error('Terjadi kesalahan tidak dikenal saat memanggil Gemini API.');
      }
    }
  }

  static async generateBlog(prompt: string): Promise<GeneratedBlog> {
    const systemPrompt = `Kamu adalah seorang penulis blog yang ahli. PENTING: Responmu HARUS berupa JSON yang valid dengan format PERSIS seperti ini:

{"title":"judul yang menarik dan SEO friendly","content":"konten artikel yang lengkap, informatif, dan engaging. Minimal 500 kata. Gunakan HTML tags untuk formatting seperti <h2>, <h3>, <p>, <ul>, <li>, <strong>, <em>, dll. Buat artikel yang terstruktur dengan baik dengan subjudul dan paragraf yang jelas."}

Topik yang diminta: ${prompt}

ATURAN KETAT:
1. HANYA berikan JSON, jangan ada teks lain
2. Jangan gunakan markdown code blocks (\`\`\`)
3. Jangan ada penjelasan tambahan
4. JSON harus dalam satu baris
5. Judul menarik dan clickable
6. Konten minimal 500 kata dengan HTML formatting
7. Terstruktur dengan baik (intro, body, conclusion)
8. SEO friendly

CONTOH RESPONSE:
{"title":"Tips Memilih Tema Wedding yang Sempurna untuk Hari Bahagia Anda","content":"<h2>Memilih Tema Wedding yang Tepat</h2><p>Memilih tema wedding adalah salah satu keputusan penting dalam perencanaan pernikahan...</p>"}`;

    return this.makeRequest(systemPrompt);
  }

  static async regenerateBlog(originalTitle: string, originalContent: string): Promise<GeneratedBlog> {
    const systemPrompt = `Kamu adalah seorang penulis blog yang ahli. PENTING: Responmu HARUS berupa JSON yang valid dengan format PERSIS seperti ini:

{"title":"judul yang diperbaiki (bisa sama atau lebih baik)","content":"konten artikel yang diperbaiki dan diperluas. Minimal 800 kata. Gunakan HTML tags untuk formatting seperti <h2>, <h3>, <p>, <ul>, <li>, <strong>, <em>, dll. Buat artikel yang terstruktur dengan baik."}

Artikel asli:
Judul: ${originalTitle}
Konten: ${originalContent}

ATURAN KETAT:
1. HANYA berikan JSON, jangan ada teks lain
2. Jangan gunakan markdown code blocks (\`\`\`)
3. Jangan ada penjelasan tambahan
4. JSON harus dalam satu baris
5. Judul tetap relevan atau lebih baik
6. Konten minimal 800 kata dengan HTML formatting
7. Terstruktur dengan baik (intro, body, conclusion)
8. SEO friendly

CONTOH RESPONSE:
{"title":"Tips Memilih Tema Wedding yang Sempurna untuk Hari Bahagia Anda","content":"<h2>Memilih Tema Wedding yang Tepat</h2><p>Memilih tema wedding adalah salah satu keputusan penting dalam perencanaan pernikahan...</p>"}`;

    return this.makeRequest(systemPrompt);
  }

  static generateSlug(title: string): string {
    return title
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .trim();
  }
}
